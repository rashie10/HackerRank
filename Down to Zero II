// Fix: Define MAX_N to a sensible upper bound
#define MAX_N 1000001

int min(int a, int b) {
    return (a < b) ? a : b;
}

static int dp[MAX_N];

void precompute() {
    for (int i = 0; i < MAX_N; i++) {
        dp[i] = INT_MAX;
    }

    dp[0] = 0;

    for (int i = 1; i < MAX_N; i++) {
        dp[i] = dp[i - 1] + 1;

        int sqrt_i = (int)sqrt(i);
        for (int a = 2; a <= sqrt_i; a++) {
            if (i % a == 0) {
                int b = i / a;
                if (b < MAX_N) {
                    dp[i] = min(dp[i], dp[b] + 1);
                }
            }
        }
    }
}

int downToZero(int n) {
    static bool initialized = false;

    if (!initialized) {
        precompute();
        initialized = true;
    }

    if (n < MAX_N)
        return dp[n];
    else
        return -1; // Out of bounds (shouldn't happen given constraints)
}
